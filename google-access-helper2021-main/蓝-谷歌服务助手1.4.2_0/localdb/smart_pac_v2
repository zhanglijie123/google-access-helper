var proxy = "__PROXY__ DIRECT";

var direct = 'DIRECT;';

var cnips = __GEOIP_LIST__;

var geoip_switch = __CN_IPS_SWITCH__;
if(!geoip_switch) {
    cnips = [];
}

var directDomains = __DIRECT_DOMAINS__;

var domainsUsingProxy = __DOMAINS__;

var localTlds = {
    ".localhost": 1,
    ".test": 1
};

function to_dict(domains) {
    var domain_dict = {};
    for (var i = 0; i < domains.length; i++) {
        if (domains[i].endsWith(".")) {
            domains[i] = domains[i].slice(0, -1)
        }
        var url_list = domains[i].split('.');

        var domain_node = domain_dict;
        for (var j = url_list.length; j > 0; j--) {
            var node_name = url_list[j - 1];
            if (!domain_node.hasOwnProperty(node_name)) {
                if (j === 1) {
                    domain_node[node_name] = true;
                    break;
                } else {
                    domain_node[node_name] = {};
                }
            } else if (domain_node[node_name] === true) {
                break;
            }
            domain_node = domain_node[node_name];
        }
    }
    return domain_dict;
}

directDomains = to_dict(directDomains);
domainsUsingProxy = to_dict(domainsUsingProxy);


var hasOwnProperty = Object.hasOwnProperty;

var ipRegExp = new RegExp(/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/);

function belongsToSubnet(host, list) {
  var ip = host.split(".").map(Number);
  ip = 0x1000000 * ip[0] + 0x10000 * ip[1] + 0x100 * ip[2] + ip[3];

  if (ip < list[0][0])
    return false;

  // Binary search
  var x = 0, y = list.length, middle;
  while (y - x > 1) {
    middle = Math.floor((x + y) / 2);
    if (list[middle][0] < ip)
      x = middle;
    else
      y = middle;
  }

  // Match
  var masked = ip & list[x][1];
  return (masked ^ list[x][0]) == 0;
}

function isGeoip(host) {
  return belongsToSubnet(host, cnips);
}

function testDomain(host, domain_dict) {
    var host_list = host.split('.')
    var domain_node = domain_dict
    for (var i = host_list.length; i > 0; i--) {
        var node_name = host_list[i - 1]
        if (domain_node.hasOwnProperty(node_name)) {
            if (domain_node[node_name] === true) {
                return true;
            } else {
                domain_node = domain_node[node_name]
            }

        }
        else {
            return false;
        }
    }
    return false;
}

function isLocalTestDomain(domain) {
    var tld = domain.substring(domain.lastIndexOf('.'));
    if (tld === domain) {
        return false;
    }
    return Object.hasOwnProperty.call(localTlds, tld);
}

function isPrivateIp(ip) {
    return /^(::f{4}:)?10\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(ip) ||
        /^(::f{4}:)?192\.168\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(ip) ||
        /^(::f{4}:)?172\.(1[6-9]|2\d|30|31)\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(ip) ||
        /^(::f{4}:)?127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(ip) ||
        /^(::f{4}:)?169\.254\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(ip) ||
        /^f[cd][0-9a-f]{2}:/i.test(ip) ||
        /^fe80:/i.test(ip) ||
        /^::1$/.test(ip) ||
        /^::$/.test(ip);
}

var its_testdomain = __TESTDOMAIN__;
function isTestSpeedDomain(host) {
    if (typeof its_testdomain[host] !== "undefined") {
        return "HTTPS " + its_testdomain[host] + ";";
    }
    return false;
}

function FindProxyForURL(url, host) {
    if (isPlainHostName(host)
        || isPrivateIp(host)
        || isLocalTestDomain(host)
        || host === 'localhost') {
        return direct;
    }

    if (/itestspeed\.xyz$/ig.test(host)) {
        its = isTestSpeedDomain(host);
        if (its !== false) return its;
    }

    if (!ipRegExp.test(host)) {
        if (testDomain(host, directDomains)) {
            return direct;
        }
        
        if (testDomain(host, domainsUsingProxy)) {
            return proxy;
        }
        if (cnips.length < 1) return direct;
        strIp = dnsResolve(host);
    } else {
        strIp = host
    }
    if (cnips.length < 1) return direct;

    if (!strIp) {
        return proxy;
    }

    if (isGeoip(strIp)) {
        return direct;
    }

    return proxy;
}